$date
	Wed Jan 26 22:10:20 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module FPD_32_test $end
$var wire 32 ! Quotient [31:0] $end
$var reg 32 " Dividend [31:0] $end
$var reg 32 # Divisor [31:0] $end
$scope module DUT $end
$var wire 32 $ Dividend [31:0] $end
$var wire 32 % Divisor [31:0] $end
$var wire 32 & Quotient [31:0] $end
$scope module D1 $end
$var wire 23 ' Dividend [22:0] $end
$var wire 23 ( Divisor [22:0] $end
$var reg 23 ) Quotient [22:0] $end
$var reg 5 * shiftDividend [4:0] $end
$var reg 5 + shiftDivisor [4:0] $end
$var reg 5 , shiftQuotient [4:0] $end
$var reg 24 - temp [23:0] $end
$var reg 24 . tempDividend [23:0] $end
$var reg 24 / tempDivisor [23:0] $end
$var integer 32 0 count [31:0] $end
$upscope $end
$scope module E1 $end
$var wire 8 1 Dividend_exponent [7:0] $end
$var wire 8 2 Divisor_exponent [7:0] $end
$var reg 8 3 exponent_out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#5
b10001000 3
b1000100001111000000000000000000 !
b1000100001111000000000000000000 &
b1111000000000000000000 )
b11000 0
b1111000000000000000000 .
b100101 /
b0 -
b10010 ,
b1100 *
b10010 +
b1111100 2
b101000000000000000000 (
b10000101 1
b1101101011000000000000 '
b111110000101000000000000000000 #
b111110000101000000000000000000 %
b1000010101101101011000000000000 "
b1000010101101101011000000000000 $
#10
b1111110 3
b111111000000000000000000000000 !
b111111000000000000000000000000 &
b0 )
b0 -
b11000 0
b0 .
b1 /
b11000 ,
b10111 *
b10111 +
b10000000 2
b0 (
b1111111 1
b0 '
b1000000000000000000000000000000 #
b1000000000000000000000000000000 %
b111111100000000000000000000000 "
b111111100000000000000000000000 $
#15
b0 ,
b1 -
b11000 0
b0 .
b101 /
b10111 *
b10101 +
b10000001 2
b1000000000000000000000 (
b10000000 1
b1000000101000000000000000000000 #
b1000000101000000000000000000000 %
b1000000000000000000000000000000 "
b1000000000000000000000000000000 $
#20
